f string
title(), upper(), lower()
strip(), lstrip(), rstrip()


Lists:
Methods: .append(), .clear(), .copy(), .count(), .extend(), .index(), .insert(), .pop(), .remove(), .reverse(), .sort(), .sort(reverse=True)
Functions: len(), sorted(), sorted(list, reverse=True), reversed()


Loops - For Loop:
Functions: range(), list(), min(), max(), sum()


List comprehension:
numbers = [value**2 for value in range(1, 11)]


slices[1::2]


tuples = ()


Dictionaries
.get(), .items(), .keys(), .values methods
set() function


User Input
input(), int() functions
Modulo Operator % eX>: 4 % 3 returns 1 (reminder, resto)
concatenation: my_string += opp + " "


Functions:
Arguments and Parameters. Positional Arguments. Keyword Arguments. Default Values.
Return Values. Making an Argument Optional. Returning a Dictionary.
Passing a List. Modifying a List in a Function(passing a copy[:]).
Passing an Arbitrary Number of *Arguments. (tuple)
Mixing Positional and Arbitrary *Arguments
Using Arbitrary Keyword **Arguments (dictionary)


Classes
Instances




Style:
Indentation: 4 spaces or tab (Spaces are the preferred indentation method.)
Line length: less than 80 characters (79 characters limit)
Comment length: limited to 72 characters per line

If you specify a default value for a parameter, no spaces should be used on either side of the equal sign:

def function_name(parameter_0, parameter_1='default value')

The same convention should be used for keyword arguments in function calls:

function_name(value_0, parameter_1='value')

PEP 8 (https://www.python.org/dev/peps/pep-0008/) recommends that you limit lines of code to 79 characters so every line is visible in a reasonably sized editor window. If a set of parameters causes a function’s definition to be longer than 79 characters, press ENTER after the opening parenthesis on the definition line. On the next line, press TAB twice to separate the list of arguments from the body of the function, which will only be indented one level.

Most editors automatically line up any additional lines of parameters to match the indentation you have established on the first line:

def function_name(
        parameter_0, parameter_1, parameter_2,
        parameter_3, parameter_4, parameter_5):
    function body...

If your program or module has more than one function, you can separate each by two blank lines to make it easier to see where one function ends and the next one begins.

All import statements should be written at the beginning of a file. The only exception is if you use comments at the beginning of your file to describe the overall program.




Styling Classes

A few styling issues related to classes are worth clarifying, especially as your programs become more complicated.

Class names should be written in CamelCase. To do this, capitalize the first letter of each word in the name, and don’t use underscores. Instance and module names should be written in lowercase with underscores between words.

Every class should have a docstring immediately following the class definition. The docstring should be a brief description of what the class does, and you should follow the same formatting conventions you used for writing docstrings in functions. Each module should also have a docstring describing what the classes in a module can be used for.

You can use blank lines to organize code, but don’t use them excessively. Within a class you can use one blank line between methods, and within a module you can use two blank lines to separate classes.

If you need to import a module from the standard library and a module that you wrote, place the import statement for the standard library module first. Then add a blank line and the import statement for the module you wrote. In programs with multiple import statements, this convention makes it easier to see where the different modules used in the program come from.